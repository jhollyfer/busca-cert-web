/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './pages/__root'
import { Route as AdministratorLayoutRouteImport } from './pages/_administrator/layout'
import { Route as IndexRouteImport } from './pages/index'
import { Route as AdministratorDashboardRouteImport } from './pages/_administrator/dashboard'

const AdministratorLayoutRoute = AdministratorLayoutRouteImport.update({
  id: '/_administrator',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdministratorDashboardRoute = AdministratorDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdministratorLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof AdministratorDashboardRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof AdministratorDashboardRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_administrator': typeof AdministratorLayoutRouteWithChildren
  '/_administrator/dashboard': typeof AdministratorDashboardRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/dashboard'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/dashboard'
  id: '__root__' | '/' | '/_administrator' | '/_administrator/dashboard'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdministratorLayoutRoute: typeof AdministratorLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_administrator': {
      id: '/_administrator'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AdministratorLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_administrator/dashboard': {
      id: '/_administrator/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AdministratorDashboardRouteImport
      parentRoute: typeof AdministratorLayoutRoute
    }
  }
}

interface AdministratorLayoutRouteChildren {
  AdministratorDashboardRoute: typeof AdministratorDashboardRoute
}

const AdministratorLayoutRouteChildren: AdministratorLayoutRouteChildren = {
  AdministratorDashboardRoute: AdministratorDashboardRoute,
}

const AdministratorLayoutRouteWithChildren =
  AdministratorLayoutRoute._addFileChildren(AdministratorLayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdministratorLayoutRoute: AdministratorLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
